React memo:
•	It is HOC (high order component) is not a react hook.
•	If stops the unnecessary rendering of the functional components of its props.
•	It will improve the performance of the fundamental components.
 App.js
import { useState } from "react";
import ChildA from "./ChildA"
import ChildB from "./ChildB"
const Parent=()=>{
  const [count, setCount]=useState(0)
  const increment=()=>{
  setCount(c=>c+1);
  }
return(
  <div>
    <ChildA/>
    <ChildB count= {count} increment={increment}/>
  </div>
)
};
export default Parent;
// import React from "react";
const ChildA=()=>{
    console.log("Child A rendered")
    return <h2> This is Child A</h2>
};
export default ChildA;


ChildB.js
const ChildB=({count,increment})=>{
    console.log("Child B is rendered")
    return(
        <div>
            <h1>Count: {count}</h1>
            <button onClick={increment}>Increment</button>
        </div>
    )
}
export default ChildB;

ChildA.js (using memo):
import { memo } from "react";
function ChildA() {
    console.log("Child A rendered");
    return <h2> This is Child A</h2>;
}
export default memo(ChildA);


Built-in-methods:
input()
len()
Str()

App.js:
import { useState } from "react";
import ChildA from "./ChildA"
import ChildB from "./ChildB"
const Parent=()=>{
  const [count, setCount]=useState(0)
  const increment=()=>{
  setCount(c=>c+1);
  }
return(
  <div>
    <ChildA/>
    <ChildB count= {count} increment={increment}/>
  </div>
)
};
export default Parent;

ChildA.js:
import { memo } from "react";
function ChildA() {
    console.log("Child A rendered");
    return <h2> This is Child A</h2>;
}
export default memo(ChildA);

ChildB.js:
const ChildB=({count,increment})=>{
    console.log("Child B is rendered")
    return(
        <div>
            <h1>Count: {count}</h1>
            <button onClick={increment}>Increment</button>
        </div>
    )
}
export default ChildB;
